name: test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run_tests:
    strategy:
      matrix:
        build_type: [ Release, Debug ]
        os: [ windows-2022, ubuntu-22.04]
        # Native toolchain is native compiler for the platform: MSVC for Windows, GCC for Ubuntu.
        toolchain: [ clang, native ]

    defaults:
      run:
        shell: pwsh

    env:
      BUILD_DIRECTORY: ${{github.workspace}}/build

    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Ninja (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: sudo apt-get update && sudo apt-get install ninja-build

      - name: Install Ninja (macOS)
        if: matrix.os == 'macos-12'
        run: brew install ninja

      - name: Create build directory
        run: cmake -E make_directory ${{env.BUILD_DIRECTORY}}

      - name: Windows - Select clang toolset
        if: matrix.os == 'windows-2022' && matrix.toolchain == 'clang'
        run: echo "CMAKE_GENERATOR=`"Visual Studio 17 2022`" -A x64 -T clangcl" >> $Env:GITHUB_ENV

      - name: Windows - Select msvc toolset
        if: matrix.os == 'windows-2022' && matrix.toolchain == 'native'
        run: echo "CMAKE_GENERATOR=`"Visual Studio 17 2022`" -A x64" >> $Env:GITHUB_ENV

      - name: Ubuntu - Select gcc toolset
        if: matrix.os == 'ubuntu-22.04' && matrix.toolchain == 'native'
        run: |
          echo "CC=gcc" >> $Env:GITHUB_ENV
          echo "CXX=g++" >> $Env:GITHUB_ENV
          echo "CMAKE_GENERATOR=`"Ninja Multi-Config`"" >> $Env:GITHUB_ENV

      - name: Ubuntu - Select clang toolset
        if: matrix.os == 'ubuntu-22.04' && matrix.toolchain == 'clang'
        run: |
          echo "CC=clang" >> $Env:GITHUB_ENV
          echo "CXX=clang" >> $Env:GITHUB_ENV
          echo "CMAKE_GENERATOR=`"Ninja Multi-Config`"" >> $Env:GITHUB_ENV

      - name: Configure
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: cmake ${{github.workspace}} -G ${{env.CMAKE_GENERATOR}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: cmake --build . --target test_kan --config ${{matrix.build_type}} -j 4

      - name: Test
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: ctest --build-config ${{matrix.build_type}}

      - name: Upload test results
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test_results_${{matrix.build_type}}_${{matrix.os}}_${{matrix.toolchain}}
          path: ${{env.BUILD_DIRECTORY}}/Testing/Temporary
