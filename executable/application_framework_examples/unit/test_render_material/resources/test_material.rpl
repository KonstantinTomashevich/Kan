vertex_attribute_buffer vertex
{
    f3 position;
    f2 uv;
};

instanced_attribute_buffer instanced
{
    f4x4 model;
    i1 preset_index;
    i1 grid_index;
};

struct preset_t
{
    f4 modifier_1;
    f4 modifier_2;
};

set_material read_only_storage_buffer material
{
    preset_t... presets;
};

struct grid_t
{
    f1 thickness;
    f1 separator;
};

set_material read_only_storage_buffer grid
{
    grid_t... grids;
};

vertex_stage_output vertex_output
{
    f2 uv;
    i1 preset_index;
    i1 grid_index;
};

void vertex_main (void)
{
    vertex_output.uv = vertex.uv;
    vertex_output.preset_index = instanced.preset_index;
    vertex_output.grid_index = instanced.grid_index;
    vertex_stage_output_position (pass.projection_view * instanced.model * expand_f3_to_f4 (vertex.position, 1.0));
}

set_material sampler_2d texture_1_color;
set_material sampler_2d texture_2_color;

fragment_stage_output fragment_output
{
    f4 color;
};

f1 calculate_relative_distance_to_grid (f2 uv)
{
    f2 separator_vector = f2 {
        grid.grids[vertex_output.grid_index].separator, grid.grids[vertex_output.grid_index].separator};
    f2 localized_fracts = fract_f2 (uv / separator_vector);
    f2 distances = abs_f2 (localized_fracts - step_f2 (f2 {0.5, 0.5}, localized_fracts));
    return min_f1 (distances._0, distances._1);
}

void fragment_main (void)
{
    f1 relative_distance_from_grid = calculate_relative_distance_to_grid (vertex_output.uv);
    f1 relative_half_thickness =
        0.5 * grid.grids[vertex_output.grid_index].thickness /
        grid.grids[vertex_output.grid_index].separator;

    if (relative_distance_from_grid < relative_half_thickness ||
        relative_distance_from_grid > 1.0 - relative_half_thickness)
    {
        fragment_output.color = f4 {0.0, 0.0, 0.0, 1.0};
    }
    else
    {
        fragment_output.color =
            texture_1_color (vertex_output.uv) * material.presets[vertex_output.preset_index].modifier_1 +
            texture_2_color (vertex_output.uv) * material.presets[vertex_output.preset_index].modifier_2;
    }
}
