// Ported code glsl code from naga benchmark to rpl in order to use for benchmarking.

vertex_attribute_container vertex
{
    f3 position;
    f3 normal;
    f2 uv;
    f4 tangent;
};

state_container state
{
    f3 world_position;
    f3 world_normal;
    f2 uv;
    f4 world_tangent;
};

set_object uniform_buffer volatile_uniforms
{
    f4x4 view_projection;
    f4x4 model;
    f4 camera_position;
};

void vertex_main (void)
{
    f4 position_4 = f4 {vertex.position, 1.0};
    f4 world_position_4 = volatile_uniforms.model * position_4;
    state.world_position = world_position_4.xyz;

    f3x3 model_cropped = f3x3 {volatile_uniforms.model};
    state.world_normal = model_cropped  * vertex.normal;
    state.uv = vertex.uv;
    state.world_tangent = f4 {model_cropped * vertex.tangent.xyz, vertex.tangent.w};
    vertex_stage_output_position (world_position_4);
}

global count max_point_lights 10;
global count max_directional_lights 1;

struct point_light_t
{
    f4 position;
    f4 color;
    f4 light_parameters;
};

struct directional_light_t
{
    f4 direction;
    f4 color;
};

set_pass uniform_buffer lights
{
    f4 ambient_color;
    u4 counts;
    point_light_t[max_point_lights] point;
    directional_light_t[max_point_lights] directional;
};

set_material uniform_buffer material
{
    f4 base_color;
    f4 proughness_metallic_reflectance;
    f4 emissive;
};

set_material sampler texture_sampler;

set_material image_color_2d texture_base_color;
set_material image_color_2d texture_metallic_roughness;
set_material image_color_2d texture_normal;
set_material image_color_2d texture_occlusion;
set_material image_color_2d texture_emissive;

color_output_container fragment_output
{
    f4 color;
};

f1 pow5 (in f1 x)
{
    f1 x2 = x * x;
    return x2 * x2 * x;
}

f1 get_distance_attenuation (in f1 distance_square, in f1 inverse_range_squared)
{
    f1 factor = distance_square * inverse_range_squared;
    f1 smooth_factor = clamp_f1 (1.0 - factor * factor, 0.0, 1.0);
    f1 attenuation = smooth_factor * smooth_factor;
    return attenuation / max_f1 (distance_square, 0.001);
}

f1 d_ggx (in f1 roughness, in f1 n_o_h, in f3 h)
{
    f1 one_minus_n_o_h_squared = 1.0 - n_o_h * n_o_h;
    f1 a = n_o_h * roughness;
    f1 k = roughness / (one_minus_n_o_h_squared + a * a);
    f1 d = k * k * (1.0 / pi ());
    return d;
}

f1 v_smith_ggx_correlated (in f1 roughness, in f1 n_o_v, in f1 n_o_l)
{
    f1 a2 = roughness * roughness;
    f1 lambda_v = n_o_l * sqrt_f1 ((n_o_v - a2 * n_o_v) * n_o_v + a2);
    f1 lambda_l = n_o_v * sqrt_f1 ((n_o_l - a2 * n_o_l) * n_o_l + a2);
    f1 v = 0.5 / (lambda_v + lambda_l);
    return v;
}

f3 f_schlick_f3 (in f3 f0, in f1 f90, in f1 v_o_h)
{
    return f0 + (f3 {f90} - f0) * pow5 (1.0 - v_o_h);
}

f1 f_schlick_f1 (in f1 f0, in f1 f90, in f1 v_o_h)
{
    return f0 + (f90 - f0) * pow5 (1.0 - v_o_h);
}

f3 fresnel (in f3 f0, in f1 l_o_h)
{
    f1 f90 = clamp_f1 (dot_f3 (f0, f3 {50.0 * 0.33}), 0.0, 1.0);
    return f_schlick_f3 (f0, f90, l_o_h);
}

f3 specular (
    in f3 f0, in f1 roughness, in f3 h, in f1 n_o_v, in f1 n_o_l, in f1 n_o_h, in f1 l_o_h, in f1 specular_intensity)
{
    f1 d = d_ggx (roughness, n_o_h, h);
    f1 v = v_smith_ggx_correlated (roughness, n_o_v, n_o_l);
    f3 f = fresnel (f0, l_o_h);
    return f * specular_intensity * d * v;
}

f1 fd_burley (in f1 roughness, in f1 n_o_v, in f1 n_o_l, in f1 l_o_h)
{
    f1 f90 = 0.5 + 2.0 * roughness * l_o_h * l_o_h;
    f1 light_scatter = f_schlick_f1 (1.0, f90, n_o_l);
    f1 view_scatter = f_schlick_f1 (1.0, f90, n_o_v);
    return light_scatter * view_scatter * (1.0 / pi ());
}

f3 env_brdf_approx (in f3 f0, in f1 p_roughness, in f1 n_o_v)
{
    f4 c0 = f4 {-1.0, -0.0275, -0.572, 0.022};
    f4 c1 = f4 {1.0, 0.0425, 1.04, -0.04};
    f4 r = f4{p_roughness, p_roughness, p_roughness, p_roughness} * c0 * c1;
    f1 a004 = min_f1 (r.x * r.x, exp2_f1 (-9.28 * n_o_v)) * r.x * r.x;
    f2 ab = f2 {-1.04} * f2 {a004} + f2 {r.zw};
    return f0 * ab.xxx + ab.yyy;
}

f1 perceptual_roughness_to_roughness (in f1 p_roughness)
{
    f1 clamped = clamp_f1 (p_roughness, 0.089, 1.0);
    return clamped * clamped;
}

f3 reinhard (in f3 color)
{
    return color / (f3 {1.0} + color);
}

f3 reinhard_extended (in f3 color, in f1 max_white)
{
    f3 numerator = color * (f3 {1.0} + (color / f3 {max_white * max_white}));
    return numerator / (f3 {1.0} + color);
}

f1 luminance (in f3 v)
{
    return dot_f3 (v, f3 {0.2126, 0.7152, 0.0722});
}

f3 change_luminance (in f3 v_in, in f1 l_out)
{
    f1 l_in = luminance (v_in);
    return v_in * (l_out / l_in);
}

f3 reinhard_luminance (in f3 color)
{
    f1 l_old = luminance (color);
    f1 l_new = l_old / (1.0 + l_old);
    return change_luminance (color, l_new);
}

f3 reinhard_extended_luminance (in f3 color, in f1 max_white_l)
{
    f1 l_old = luminance (color);
    f1 numerator = l_old * (1.0 + (l_old / (max_white_l * max_white_l)));
    f1 l_new = numerator / (1.0 + l_old);
    return change_luminance (color, l_new);
}

f3 point_light (
    in point_light_t light, in f1 roughness, in f1 n_dot_v, in f3 _n, in f3 _v, in f3 _r, in f3 f0, in f3 diffuse_color)
{
    f3 light_to_frag = light.position.xyz - state.world_position;
    f1 distance_square = dot_f3 (light_to_frag, light_to_frag);
    f1 range_attenuation = get_distance_attenuation (distance_square, light.light_parameters.x);

    f1 a = roughness;
    f1 radius = light.light_parameters.y;
    f3 center_to_ray = _r * dot_f3 (light_to_frag, _r) - light_to_frag;
    f3 closest_point = light_to_frag +
        center_to_ray * clamp_f1 (radius * inverse_sqrt_f1 (dot_f3 (center_to_ray, center_to_ray)), 0.0, 1.0);
    f1 lspec_length_inverse = inverse_sqrt_f1 (dot_f3 (closest_point, closest_point));
    f1 normalization_factor = a / clamp_f1 (a + (radius * 0.5 * lspec_length_inverse), 0.0, 1.0);
    f1 specular_intensity = normalization_factor * normalization_factor;

    f3 _l = closest_point * lspec_length_inverse;
    f3 _h = normalize_f3 (_l + _v);
    f1 n_o_l = clamp_f1 (dot_f3 (_n, _l), 0.0, 1.0);
    f1 n_o_h = clamp_f1 (dot_f3 (_n, _h), 0.0, 1.0);
    f1 l_o_h = clamp_f1 (dot_f3 (_l, _h), 0.0, 1.0);

    f3 spec = specular (f0, roughness, _h, n_dot_v, n_o_l, n_o_h, l_o_h, specular_intensity);

    _l = normalize_f3 (light_to_frag);
    _h = normalize_f3 (_l + _v);
    n_o_l = clamp_f1 (dot_f3 (_n, _l), 0.0, 1.0);
    n_o_h = clamp_f1 (dot_f3 (_n, _h), 0.0, 1.0);
    l_o_h = clamp_f1 (dot_f3 (_l, _h), 0.0, 1.0);

    f3 diffuse = diffuse_color * fd_burley (roughness, n_dot_v, n_o_l, l_o_h);

    return ((diffuse + spec) * light.color.xyz) * range_attenuation * n_o_l;
}

f3 directional_light (
    in directional_light_t light, in f1 roughness, in f1 n_dot_v, in f3 normal, in f3 view, in f3 _r, in f3 f0, 
    in f3 diffuse_color)
{
    f3 incident_light = light.direction.xyz;

    f3 half_vector = normalize_f3 (incident_light + view);
    f1 n_o_l = clamp_f1 (dot_f3 (normal, incident_light), 0.0, 1.0);
    f1 n_o_h = clamp_f1 (dot_f3 (normal, half_vector), 0.0, 1.0);
    f1 l_o_h = clamp_f1 (dot_f3 (incident_light, half_vector), 0.0, 1.0);

    f3 diffuse = diffuse_color * fd_burley (roughness, n_dot_v, n_o_l, l_o_h);
    f1 specular_intensity = 1.0;
    f3 spec = specular (f0, roughness, half_vector, n_dot_v, n_o_l, n_o_h, l_o_h, specular_intensity);

    return (spec + diffuse) * light.color.xyz * n_o_l;
}

void fragment_main (void)
{
    f4 output_color = material.base_color;
    output_color = output_color * sample (texture_sampler, texture_base_color, state.uv);

    f4 metallic_roughness = sample (texture_sampler, texture_metallic_roughness, state.uv);
    f1 metallic = material.proughness_metallic_reflectance.y * metallic_roughness.z;
    f1 p_roughness = material.proughness_metallic_reflectance.x * metallic_roughness.y;
    f1 roughness = perceptual_roughness_to_roughness (p_roughness);

    f3 _n = normalize_f3 (state.world_normal);
    f3 _t = normalize_f3 (state.world_tangent.xyz);
    f3 _b = cross_f3 (_n, _t) * state.world_tangent.w;

    // TODO: Not working with gl_FrontFacing for now as I'm not sure it is always need, because we cull back faces?

    f3x3 _tbn = f3x3 {_t, _b, _n};
    _n = _tbn * normalize_f3 (sample (texture_sampler, texture_normal, state.uv).xyz * 2.0 - f3 {1.0});

    f1 occlusion = sample (texture_sampler, texture_occlusion, state.uv).x;

    f4 sampled_emissive = sample (texture_sampler, texture_emissive, state.uv);
    f4 emissive = f4 {material.emissive.xyz * sampled_emissive.xyz, material.emissive.w};

    f3 _v = normalize_f3 (volatile_uniforms.camera_position.xyz - state.world_position);
    f1 n_dot_v = max_f1 (dot_f3 (_n, _v), 0.001);

    f1 reflectance = material.proughness_metallic_reflectance.z;
    f1 f0_temp = 0.16 * reflectance * reflectance * (1.0 - metallic);
    f3 f0 = f3 {f0_temp} + output_color.xyz * f3 {metallic};

    f3 diffuse_color = output_color.xyz * f3 {1.0 - metallic};
    f3 _r = reflect_f3 (-_v, _n);

    f3 light_accum = f3 {0.0};
    for (u1 i = 0u; i < lights.counts.x && i < max_point_lights; i = i + 1u)
    {
        light_accum = light_accum + point_light (lights.point[i], roughness, n_dot_v, _n, _v, _r, f0, diffuse_color);
    }

    for (u1 i = 0u; i < lights.counts.y && i < max_directional_lights; i = i + 1u)
    {
        light_accum = light_accum + directional_light (
            lights.directional[i], roughness, n_dot_v, _n, _v, _r, f0, diffuse_color);
    }

    f3 diffuse_ambient = env_brdf_approx (diffuse_color, 1.0, n_dot_v);
    f3 specular_ambient = env_brdf_approx (f0, p_roughness, n_dot_v);

    f3 output_3 = light_accum +
        (diffuse_ambient + specular_ambient) * lights.ambient_color.xyz * occlusion + emissive.xyz * output_color.w;

    output_3 = reinhard_luminance (output_3);
    fragment_output.color = f4 {output_3, output_color.w};
}
