// Generic pipeline with lots of options and conditionals to be processed.

global flag enable_skinning on;
global flag skinning_2_weights on;
global flag skinning_4_weights off;
global flag support_instancing on;

instance flag wireframe off;

conditional (!wireframe) setting polygon_mode "fill";
conditional (wireframe) setting polygon_mode "wireframe";
setting cull_mode "back";
setting depth_test on;
setting depth_write on;
setting depth_min 0.0;
setting depth_max 1.0;

setting color_output_use_blend on block 0;

conditional (enable_skinning) struct joint_data_t
{
    meta (hidden, model_joint_matrices)
    f4x4[max_joints] model_joints;
};

vertex_attribute_buffer vertex
{
    f3 position;
    f3 normal;
    f2 uv;

    conditional (enable_skinning && skinning_2_weights) i2 joint_indices;
    conditional (enable_skinning && skinning_2_weights) f2 joint_weights;

    conditional (enable_skinning && skinning_4_weights) i4 joint_indices;
    conditional (enable_skinning && skinning_4_weights) f4 joint_weights;
};

conditional (support_instancing) instanced_attribute_buffer instance_vertex
{
    f4 color_multiplier;

    meta (hidden, model_space_matrix)
    f4x4 model_space;

    conditional (enable_skinning)
    meta (hidden, joint_offset_index)
    i1 joint_offset;
};

set_pass uniform_buffer pass
{
    meta (hidden, projection_view_matrix)
    f4x4 projection_mul_view;
};

conditional (!support_instancing) set_material uniform_buffer material
{
    f4 color_multiplier;
};

conditional (!support_instancing) set_object uniform_buffer object
{
    conditional (!enable_skinning)
    meta (hidden, model_space_matrix)
    f4x4 model_space;

    conditional (enable_skinning)
    f4x4... joint_transforms;
};

conditional (support_instancing && enable_skinning) set_shared read_only_storage_buffer joints
{
    f4x4... transforms;
};

vertex_stage_output vertex_output
{
    f2 uv;
    f4 color_multiplier;
};

void vertex_main (void)
{
    vertex_output.uv = vertex.uv;
    conditional (support_instancing) alias (color_multiplier, instance_vertex.color_multiplier)
    conditional (!support_instancing) alias (color_multiplier, material.color_multiplier)
    vertex_output.color_multiplier = color_multiplier;

    f4 position4 = f4 {vertex.position.xyz, 1.0};
    conditional (enable_skinning)
    {
        conditional (support_instancing) alias (transforms, joints.transforms)
        conditional (!support_instancing) alias (transforms, object.joint_transforms)
        f4x4 global_joint_transform;

        conditional (skinning_2_weights)
        {
            global_joint_transform =
                transforms[instance_vertex.joint_offset + vertex.joint_indices.x] * vertex.joint_weights.x +
                transforms[instance_vertex.joint_offset + vertex.joint_indices.y] * vertex.joint_weights.y;
        }

        conditional (skinning_4_weights)
        {
            global_joint_transform =
                transforms[instance_vertex.joint_offset + vertex.joint_indices.x] * vertex.joint_weights.x +
                transforms[instance_vertex.joint_offset + vertex.joint_indices.y] * vertex.joint_weights.y +
                transforms[instance_vertex.joint_offset + vertex.joint_indices.z] * vertex.joint_weights.z +
                transforms[instance_vertex.joint_offset + vertex.joint_indices.w] * vertex.joint_weights.w;
        }

        position4 = global_joint_transform * position4;
    }
    conditional (!enable_skinning)
    {
        conditional (support_instancing) alias (transform, instance_vertex.model_space)
        conditional (!support_instancing) alias (transform, object.model_space)
        position4 = transform * position4;
    }

    vertex_stage_output_position (pass.projection_mul_view * position4);
}

set_material sampler color_sampler;
// Use image array just for testing purposes.
set_material image_color_2d[4] diffuse_color;

fragment_stage_output fragment_output
{
    f4 color;
};

void fragment_main (void)
{
    fragment_output.color = sample (color_sampler, diffuse_color[2], vertex_output.uv) *
            darken_from_center (vertex_output.uv) *
            vertex_output.color_multiplier;
}
