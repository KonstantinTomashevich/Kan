// Generic pipeline with lots of options and conditionals to be processed.

global flag enable_skinning on;
global flag skinning_2_weights on;
global flag skinning_4_weights off;
global count max_joints 256;
global flag support_instancing on;

instance flag wireframe off;

conditional (!wireframe) setting polygon_mode "fill";
conditional (wireframe) setting polygon_mode "wireframe";
setting cull_mode "back";
setting depth_test on;
setting depth_write on;

conditional (enable_skinning) struct joint_data_t
{
    meta (hidden, model_joint_matrices)
    f4x4[max_joints] model_joints;
};

vertex_attribute_buffer vertex
{
    f3 position;
    f3 normal;
    f2 uv;

    conditional (enable_skinning && skinning_2_weights) i2 joint_indices;
    conditional (enable_skinning && skinning_2_weights) f2 joint_weights;

    conditional (enable_skinning && skinning_4_weights) i4 joint_indices;
    conditional (enable_skinning && skinning_4_weights) f4 joint_weights;
};

conditional (support_instancing && !enable_skinning) instanced_attribute_buffer instance_vertex
{
    f4 color_multiplier;

    meta (hidden, model_space_matrix)
    f4x4 model_space;
};

conditional (support_instancing && enable_skinning) instanced_read_only_storage_buffer instance_storage
{
    f4 color_multiplier;

    conditional (enable_skinning)
    joint_data_t joint_data;
};

uniform_buffer uniforms
{
    meta (hidden, projection_view_matrix)
    f4x4 projection_mul_view;

    conditional (!support_instancing)
    f4 color_multiplier;

    conditional (!support_instancing && !enable_skinning)
    meta (hidden, model_space_matrix)
    f4x4 model_space;

    conditional (!support_instancing && enable_skinning)
    joint_data_t joint_data;
};

vertex_stage_output vertex_output
{
    f2 uv;
    f4 color_multiplier;
};

void vertex_main (void)
{

    vertex_output.uv = vertex.uv;

    conditional (support_instancing && enable_skinning) alias (color_multiplier,
            instance_storage.color_multiplier)
    conditional (support_instancing && !enable_skinning) alias (color_multiplier,
            instance_vertex.color_multiplier)
    conditional (!support_instancing) alias (color_multiplier, uniforms.color_multiplier)
    vertex_output.color_multiplier = color_multiplier;

    f4 position4 = f4 {vertex.position._0, vertex.position._1, vertex.position._2, 1.0};
    conditional (enable_skinning)
    {
        conditional (support_instancing) alias (joints, instance_storage.joint_data.model_joints)
        conditional (!support_instancing) alias (joints, uniforms.joint_data.model_joints)
        f4x4 global_joint_transform;

        conditional (skinning_2_weights)
        {
            global_joint_transform =
                joints[vertex.joint_indices._0] * vertex.joint_weights._0 +
                joints[vertex.joint_indices._1] * vertex.joint_weights._1;
        }

        conditional (skinning_4_weights)
        {
            global_joint_transform =
                joints[vertex.joint_indices._0] * vertex.joint_weights._0 +
                joints[vertex.joint_indices._1] * vertex.joint_weights._1 +
                joints[vertex.joint_indices._2] * vertex.joint_weights._2 +
                joints[vertex.joint_indices._3] * vertex.joint_weights._3;
        }

        position4 = global_joint_transform * position4;
    }
    conditional (!enable_skinning)
    {
        conditional (support_instancing) alias (transform, instance_vertex.model_space)
        conditional (!support_instancing) alias (transform, uniforms.model_space)
        position4 = transform * position4;
    }

    vertex_stage_output_position (uniforms.projection_mul_view * position4);
}

sampler_2d diffuse_color
{
    setting mag_filter "nearest";
    setting min_filter "nearest";
    setting mip_map_mode "nearest";
    setting address_mode_u "repeat";
    setting address_mode_v "repeat";
    setting address_mode_w "repeat";
};

fragment_stage_output fragment_output
{
    f4 color;
};

void fragment_main (void)
{
    fragment_output.color = diffuse_color (vertex_output.uv) *
            darken_from_center (vertex_output.uv) *
            vertex_output.color_multiplier;
}
