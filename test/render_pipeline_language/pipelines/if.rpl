// Improvised simple pipeline to check that single if's and chains if if's can be properly processed.

vertex_attribute_buffer vertex
{
    f3 position;
    f2 uv;
};

set_pass uniform_buffer pass
{
    f4x4 model_view_projection;
};

vertex_stage_output vertex_output
{
    f2 uv;
};

void vertex_main (void)
{
    vertex_output.uv = vertex.uv;
    f4 position4 = f4 {vertex.position.xyz, 1.0};
    vertex_stage_output_position (pass.model_view_projection * position4);
}

set_material sampler color_sampler;
set_material image_color_2d diffuse_color;

fragment_stage_output fragment_output
{
    f4 color;
};

f4 calculate_modifier (void)
{
    f2 fract_uv = fract_f2 (vertex_output.uv);
    if (fract_uv.x < 0.1 || fract_uv.x > 0.9 ||
        fract_uv.y < 0.1 || fract_uv.y > 0.9)
    {
        return f4 {0.2, 0.2, 0.2, 1.0};
    }

    if (fract_uv.x < 0.5 && fract_uv.y < 0.5)
    {
        return f4 {1.0, 0.0, 0.0, 1.0};
    }
    else if (fract_uv.x < 0.5 && fract_uv.y > 0.5)
    {
        return f4 {0.0, 1.0, 0.0, 1.0};
    }
    else if (fract_uv.x > 0.5 && fract_uv.y < 0.5)
    {
        return f4 {0.0, 0.0, 1.0, 1.0};
    }
    else
    {
        return f4 {1.0, 1.0, 1.0, 1.0};
    }
}

// We separate this into special function to make sure that buffer usage is correctly translated to caller.
// Also, we use it as opportunity to test that image arguments work.
f4 calculate_fragment_base_color (in image_color_2d image)
{
    return sample (color_sampler, image, vertex_output.uv);
}

void fragment_main (void)
{
    fragment_output.color = calculate_fragment_base_color (diffuse_color) * calculate_modifier ();
}
